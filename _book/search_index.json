[
["unix-tools.html", "8 Unix tools 8.1 Introduction 8.2 Bourne Again SHell (BASH) 8.3 Getting started with the shell 8.4 Text editing 8.5 Data wrangling 8.6 Web 8.7 Attributions", " 8 Unix tools 8.1 Introduction Over the past months, you have learned all about advanced topics in the domains of spatial analysis and machine learning. However, in your career as a data scientist or researcher, you are also very likely to encounter having to work in a command line environment. To do this, and to take full advantage of the tool that your computer provides, this week we will be working with a text interface: [the Shell](https://en.wikipedia.org/wiki/Shell_(computing). A shell is a computer program which exposes an operating system’s services to a human user or other program. Although several shell programmes exist, at their core they are all roughly the same: they allow you to run programmes from within a textual environment. This week we will focus on one of the most widely used shells: bash (Bourne Again SHell). We will look into some basic commands, accessing a remote server, and using some Unix tools for basic data wrangling tasks. The lecture videos this week are provided by Dr Balamurugan Soundararaj, who obtained a Masters’ degree from CASA and a PhD from UCL Geography, is an avid Unix user and made extensive use of Unix tools to set up a data processing pipeline for his PhD research. Let’s get started! Video: Introduction W08 [Lecture slides] [Watch on MS stream] 8.1.1 Reading list Because this week’s tutorial material is rather extensive and has a strong practical focus, we only have one article in our reading list this week. Core reading Soundararaj, B. et al.. 2019. Medium Data Toolkit-A Case Study on Smart Street Sensor Project. Proceedings of the 27th Conference of GIS Research UK (GISRUK). Newcastle: Newcastle University. [Link] 8.1.2 Technical Help session Every Thursday between 13h00-14h00 you can join the Technical Help session on Microsoft Teams. The session will be hosted by Alfie. He will be there for the whole hour to answer any question you have live in the meeting or any questions you have formulated beforehand. If you cannot make the meeting, feel free to post the issue you are having in the Technical Help channel on the GEOG0125 Team so that Alfie can help to find a solution. 8.2 Bourne Again SHell (BASH) We will be using Bash for this course, Bash is a Unix shell and command language. It is free software and has been distributed widely as the default login shell for most Linux distributions and Apple’s macOS, a version is also available for Windows. To open a shell prompt, which is where you can type commands, you first need a terminal. Carefully follow the installation instruction for your operating system: 8.2.1 Windows Download the Git for Windows installer. It depends on your machine, but you probably need the Git-2.30.1-64-bit.exe version. Run the installer and follow the steps below: Click on next four times (two times if you’ve previously installed Git). You don’t need to change anything in the Information, location, components, and start menu screens. From the dropdown menu select “Use Vim (the ubiquitous text editor as Git’s default editor”. Click next. On the page that says “Adjusting the name of the initial branch in new repositories”, leave the default as “Let Git decide”. Click next. Leave the\" “Git from the command line and also from 3rd-party software” button selected and click on next. Ensure that “Use the native Windows Secure Channel Library” is selected and click on next. Ensure that “Checkout Windows-style, commit Unix-style line endings” is selected and click on next. Ensure that “Use Windows’ default console window” is selected and click on next. Ensure that \"Default (fast-forward or merge) is selected and click next. Ensure that “Do not use a credential help” is selected and click on next. Ensure that “Enable file system caching” is selected and click on next. Ensure that “Enable experimental support for pseudo consoles” is not selected (default) and click on install. Click on finish or next. If your HOME environment variable is not set (or you don’t know what this is): open command prompt (Open Start Menu then type cmd and press Enter) Type the following line into the command prompt window exactly as shown: setx HOME \"%USERPROFILE%\" Press enter. You should see: SUCCESS: Specified value was saved. Quit command prompt by typing exit then pressing enter. You can now open the programme Git Bash. 8.2.2 macOS The default shell in some versions of macOS is Bash, and Bash is available in all versions, so no need to install anything. You access Bash from the Terminal (found in /Applications/Utilities). 8.2.3 Linux The default shell is usually Bash and there is usually no need to install anything. If you are running a distribution like Ubuntu Desktop you can also access Bash from the Terminal. 8.3 Getting started with the shell Now everyone should have access to a terminal, either through installation or by default, we can get started. In order to make sure that everyone has access to the same tools and functionality, we will actually use our terminal to log into a server that we have created specifically for this course. In the following, we will log in to this server through something called ssh (Secure Shell). The SSH protocol uses encryption to secure the connection between a client and a server. Start your terminal and type in the following: ssh username@178.79.152.249 Note You can find your username and password on Moodle. When you log in for the first time, you will get a message that The authenticity of host 178.79.152.249 can't be established together with the question whether you to continue connecting. Simply type yes and hit enter to log on to the server. You terminal window should now look similar to Figure 8.1. Figure 8.1: Enter the Matrix. Now we have successfully logged onto the server, you will see a prompt that looks like this: username@geog:~$. This is the main textual interface to the shell. It tells you that you are on the machine geog and that your “current working directory”, or where you currently are, is ~ (short for “home”). The $ tells you that you are not the root user (the root user can do many things an ordinary user cannot). At this prompt you can type a command, which will then be interpreted by the shell. The most basic command is to execute a program: date ## Thu Feb 18 20:13:42 GMT 2021 Here, we executed the date program, which (perhaps unsurprisingly) prints the current date and time. The shell then asks us for another command to execute. We can also execute a command with arguments: echo hello ## hello In this case, we told the shell to execute the program “echo” with the argument “hello”. The echo program simply prints out its arguments, similar to print() in R or Python. Note The shell parses the command by splitting it by whitespace, and then runs the program indicated by the first word, supplying each subsequent word as an argument that the program can access. If you want to provide an argument that contains spaces or other special characters (e.g., a directory named “My Documents”), you can either quote the argument with ' or \" (\"My Documents\"), or escape just the relevant characters with \\ (My\\\\ Documents). But how does the shell know how to find the date or echo programs? The shell is a programming environment, just like Python or R, and so it has variables, conditionals, loops, and functions. When you run commands in your shell, you are really writing a small bit of code that your shell interprets. If the shell is asked to execute a command that doesn’t match one of its programming keywords, it consults an environment variable called $PATH that lists which directories the shell should search for programs when it is given a command: echo $PATH ## /opt/miniconda3/bin:/opt/miniconda3/condabin:/Applications/IMOD/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/TeX/texbin:/opt/X11/bin When we run the echo command, the shell sees that it should execute the program echo, and then searches through the :-separated list of directories in $PATH for a file by that name. When it finds it, it runs it. We can find out which file is executed for a given program name using the which program. We can also bypass $PATH entirely by giving the path to the file we want to execute. You may have encoutered working with this $PATH variable already when you are using miniconda to manage your virtual environments. A path on the shell is a delimited list of directories; separated by / on Linux and macOS and \\ on Windows. On Linux and macOS, the path / is the “root” of the file system, under which all directories and files lie, whereas on Windows there is one root for each disk partition (e.g., C:\\). Because we are working on the GEOG0125 server we are using a Linux filesystem. A path that starts with / is called an absolute path. Any other path is a relative path. Relative paths are relative to the current working directory, which we can see with the pwd command and change with the cd command. In a path, . refers to the current directory, and .. to its parent directory. To see what lives in a given directory, we use the ls command. Try out out these commands to navigate the server. Figure 8.2: Navigating in the shell. Unless a directory is given as its first argument, ls will print the contents of the current directory. Most commands accept flags and options (flags with values) that start with - to modify their behavior. Usually, running a program with the -h or --help flag will print some help text that tells you what flags and options are available. For example, ls --help tells us: that the -l flag uses a long listing format. Figure 8.3: Using the -l flag with ls. This gives us a bunch more information about each file or directory present. In the shell, programs have two primary “streams” associated with them: their input stream and their output stream. When the program tries to read input, it reads from the input stream, and when it prints something, it prints to its output stream. Normally, a program’s input and output are both your terminal. That is, your keyboard as input and your screen as output. However, we can also rewire those streams. The simplest form of redirection is &lt; file and &gt; file. These let you rewrite the input and output streams of a programme to a file respectively. Navigate to your home directory (i.e. /home/username) and try the following: # redirect echo to file echo hello &gt; hello.txt # output file to terminal cat hello.txt # output file to terminal cat &lt; hello.txt ## hello ## hello You can also use &gt;&gt; to append to a file. Where this kind of input/output redirection really shines is in the use of pipes. The | operator lets you “chain” programs such that the output of one is the input of another. We will come back to this later. For now, some other useful commands are: command action ls list directory contents echo print text to the terminal window touch creates a file mkdir creates a directory grep search text for patterns man print manual or get help for a command pwd print working directory mv move or rename directory head read the start of a file tail read the end of a file history list your most recent commands clear clear your terminal window cp copy files and directories rm remove a file Note Be very careful with using the rm file: if you use rm to delete a file the file will be gone completely and you cannot ‘recover it from the trash’! There is no Trash can for rm! 8.3.1 Exercises Try to do the following, using the manprogramme or --help flag when you are stuck: Create a new directory called data in your home directory (/home/username). Use touch to create a new file called data.txt. Add three lines of data to data.txt; it does not matter what you add to the file!). Inspect the file with head and tail. Rename the file to data_renamed.txt. 8.4 Text editing Vim 8.5 Data wrangling pipe with sort uniq grep 8.6 Web go to personal index.html page (browser) 8.7 Attributions This material was adapted from The Missing Semester of your CS Education [The Shell, Editors (Vim), Data Wrangling). Cambridge, MA: Massachusetts Institute of Technology and is licensed under a Non Commercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0). [Link] "]
]
